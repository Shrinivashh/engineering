#include<stdio.h>
#include<stdlib.h>
int alloc[10][10],need[10][10],max[10][10],avail[10],finish[10],work[10],request[10];
int i,j,k,p,r,pno,v=0,req=0;
int check(int i)
{
    for (int i = 0; i < r; i++)
    {
        if (need[i][j]> work[j])
        {
            return 0;
        }
        return 1;
        }
    }
int main()
{
    printf("Enter the number of processes and resources:");
    scanf("%d%d",&p,&r);
    int seq[p];
    printf("Enter the allocation matrix:");
    for (int i = 0; i < p; i++)
    {
        for (int j = 0; j < r; j++)
        {
        scanf("%d",&alloc[i][j]);
        }
    }
    printf("Enter the maximum matrix:");
    for (int i = 0; i < p; i++)
    {
        for (int j = 0; j < r; j++)
        {
        scanf("%d",&max[i][j]);
        }
    }
     for (int i = 0; i < p; i++)
    {
        for (int j = 0; j < r; j++)
        {
            need[i][j]=max[i][j]-alloc[i][j];
        }
    }
    printf("Enter the available array:");
    for (int i=0 ; i<r ; ++i)
    {
        scanf("%d", &avail[i]);
        work[i]=avail[i];
    }
    L1:
    for (int i = 0; i < p; i++)
    {
        if (finish[i]==0)
        {
            break;
        }
    }
    while (v<p)
    {
        int allocated=0;
        for (int i = 0; i < p; i++)
        {
            if(!finish[i] && check(i))
            {
                for (int k = 0; k < r; k++)
                {
                     work[k]=work[k]+alloc[k];
                }
            }
        }
         if (!allocated)
            {
                break;
                /* code */
            }
         }
    for (int i = 0; i < p; i++)
    {
        if (finish[i]==0)
        {
            printf("Safe sequence not gereated");
            exit(0);
        }
        printf("Safe sequence generated:");
        for(int i=0;i<v;i++)
        {
            printf("%d",seq[i]);
        }
    }
    printf("Do you want to have another resource request?");
    scanf("%d",&req);
    if (req==0)
    {
        exit(0);
    }
    else
    {
        printf("Enter additional request:");
        for (int i = 0; i < r; i++)
        {
            scanf("%d",&request[i]);
        }
        printf("Enter the process number:");
        scanf("%d",&pno);
        for (int i = 0; i < r; i++)
        {
            if (request[i]>need[pno][i])
            {
                printf("Request cannot be granted immediately");
                exit(0);
            }
            alloc[pno][i]+=request[i];
            work[i]=avail[i];
            work[i]-=request[i];
            need[pno][i]-=request[i];
        }
        goto L1;
    }
}
