#include<stdio.h>
#include<GL/glut.h>
#include<stdlib.h>

GLfloat vertices[]={-1,-1,-1,1,-1,-1,1,1,-1,-1,1,-1,-1,-1,1,1,-1,1,1,1,1,-1,1,1};
GLfloat colors[]={0,0,0,0,0,1,0,1,0,0,1,1,1,0,0,1,0,1,1,1,0,1,1,1};
GLubyte cubeindices[]={0,1,2,3,2,3,7,6,0,4,7,3,1,2,6,5,4,5,6,7,0,1,5,4};
static GLfloat theta[]={0,0,0};
static GLint axis=2;

void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();
    glRotatef(theta[0],1,0,0);
    glRotatef(theta[1],0,1,0);
    glRotatef(theta[2],0,0,1);
    glDrawElements(GL_QUADS,24,GL_UNSIGNED_BYTE,cubeindices);
    glFlush();
    glutSwapBuffers();
}
void spincube()
{
    theta[axis]+=0.15;
    if(theta[axis]>360.0)
    {
        theta[axis]=0;
    }
    glutPostRedisplay();
}
void mouse(int btn,int state,int x,int y)
{
    if(btn==GLUT_LEFT_BUTTON && state==GLUT_DOWN)
            axis=0;
    if(btn==GLUT_MIDDLE_BUTTON && state==GLUT_DOWN)
            axis=1;
    if(btn==GLUT_RIGHT_BUTTON && state==GLUT_DOWN)
            axis=2;
}
void reshape(int w,int h)
{
    glViewport(0,0,w,h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    if(w<=h)
    {
        glOrtho(-2,2,-2*(GLfloat)h/(GLfloat)w,2*(GLfloat)h/(GLfloat)w,2,-2);
    }
    else
    {
        glOrtho(-2*(GLfloat)w/(GLfloat)h,2*(GLfloat)w/(GLfloat)h,-2,2,2,-2);
        glMatrixMode(GL_MODELVIEW);

    }

}
int main(int argc,char**argv)
{
    glutInit(&argc,argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowPosition(0,0);
    glutInitWindowSize(1000,1000);
    glutCreateWindow("SPINNING A COLOR CUBE");
    glutReshapeFunc(reshape);
    glutDisplayFunc(display);
    glutIdleFunc(spincube);
    glutMouseFunc(mouse);
    glEnable(GL_DEPTH_TEST);
    glEnableClientState(GL_VERTEX_ARRAY);
    glEnableClientState(GL_COLOR_ARRAY);
    glVertexPointer(3,GL_FLOAT,0,vertices);
    glColorPointer(3,GL_FLOAT,0,colors);
    glutMainLoop();
}
