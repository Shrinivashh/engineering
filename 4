#include<stdio.h>
#include<GL/glut.h>
#include<stdlib.h>

GLfloat vertices[]={-1,-1,-1,1,-1,-1,1,1,-1,-1,1,-1,-1,-1,1,1,-1,1,1,1,1,-1,1,1};
GLfloat colors[]={0,0,0,0,0,1,0,1,0,0,1,1,1,0,0,1,0,1,1,1,0,1,1,1};
GLubyte cubeindices[]={0,1,2,3,2,3,7,6,0,4,7,3,1,2,6,5,4,5,6,7,0,1,5,4};
static GLdouble viewer[]={0,0,5};

void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();
    gluLookAt(viewer[0],viewer[1],viewer[2],0,0,0,0,1,0);
    glDrawElements(GL_QUADS,24,GL_UNSIGNED_BYTE,cubeindices);
    glFlush();
    glutSwapBuffers();

}
void keys(unsigned char key,int x,int y)
{
    if(key=='X')
        viewer[0]-=1;
    if(key=='x')
        viewer[0]+=1;
    if(key=='Y')
        viewer[1]-=1;
    if(key=='y')
        viewer[1]+=1;
    if(key=='Z')
        viewer[2]-=1;
    if(key=='z')
        viewer[2]+=1;
    glutPostRedisplay();
}
void reshape(int w,int h)
{
    glViewport(0,0,w,h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    if(w<=h)
    {
        glFrustum(-2,2,-2*(GLfloat)h/(GLfloat)w,2*(GLfloat)h/(GLfloat)w,2,20);
    }
    else
    {
        glFrustum(-2*(GLfloat)w/(GLfloat)h,2*(GLfloat)w/(GLfloat)h,-2,2,2,20);
        glMatrixMode(GL_MODELVIEW);

    }
}
    int main(int argc,char**argv)
    {
        glutInit(&argc,argv);
        glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
        glutInitWindowPosition(0,0);
        glutInitWindowSize(1000,1000);
        glutCreateWindow("PERS[ECTIVE VIEWING");
        glutReshapeFunc(reshape);
        glEnable(GL_DEPTH_TEST);
        glutDisplayFunc(display);
        glutKeyboardFunc(keys);
        glEnableClientState(GL_VERTEX_ARRAY);
        glEnableClientState(GL_COLOR_ARRAY);
        glVertexPointer(3,GL_FLOAT,0,vertices);
        glColorPointer(3,GL_FLOAT,0,colors);
        glutMainLoop();
    }
